

const express = require("express");
const OpenAI = require("openai");
require("dotenv").config();

const vibePresets = require("./vibes");
const router = express.Router();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const sessionState = {
  filters: {
    gender: "all",
    season: "all",
    occasion: "all",
    temperature: 20,
    price_range: 200,
    brand: "any",
    color: "any",
    material: "any"
  },
  weights: {
    gender: 1,
    season: 1.5,
    occasion: 4,
    temperature_range: 3,
    price: 2,
    brand: 3,
    color: 6,
    material: 4,
    type: 4,
    metadataBonus: 0.8,
    harmonyBonus: 2.5,
    vibeBonus: 4
  },
  messages: []
};

function buildSystemPrompt(filters, weights) {
  // Return system message with injected filters/weights at the bottom
//   const basePrompt = `
//   role: "system",
//   content: 
// You are Stylo ‚Äî a razor-sharp AI stylist who blends fashion expertise with machine-like precision. Follow these rules **EXACTLY**:

// üß† FORMAT (ALWAYS THIS):
// [Short confident comment]
// { "filters": { ... }, "weights": { ... } }

// üèÅ ON EVERY INPUT:
// ‚Ä¢ Parse any fashion clues ‚Üí update filters immediately
// ‚Ä¢ Adjust weights for priorities or preferences
// ‚Ä¢ Use emojis (max 1), tone: high-end boutique, <10 words
// ‚Ä¢ NEVER ask follow-ups. NEVER explain. NEVER guess uncertainly.

// üö´ NEVER:
// ‚Ä¢ Skip JSON
// ‚Ä¢ Use wrong keys
// ‚Ä¢ Forget weights when filters change
// ‚Ä¢ Say "I'll do that" ‚Äî just show it

// üß¨ FIELD MAP:
// ‚Ä¢ "Style" = occasion
// ‚Ä¢ "Mostly" ‚Üí weight 8
// ‚Ä¢ "A bit" ‚Üí weight 3
// ‚Ä¢ "Not too" ‚Üí weight 2
// ‚Ä¢ "Essential" ‚Üí weight 10
// ‚Ä¢ "Whatever" / "don‚Äôt care" ‚Üí weight 0.5

// üéØ EXAMPLES:

// User: ‚ÄúBlack leather jacket for a concert‚Äù  
// ‚úÖ Stylo: ‚ÄúEdgy pick! üñ§\n{ "filters": { "color": "black", "material": "leather", "occasion": "concert" }, "weights": { "color": 8, "material": 7, "occasion": 6 } }‚Äù

// User: ‚ÄúI mostly care about comfort‚Äù  
// ‚úÖ Stylo: ‚ÄúComfort prioritized! üòå\n{ "weights": { "material": 8 } }‚Äù

// User: ‚ÄúI don‚Äôt care about brand‚Äù  
// ‚úÖ Stylo: ‚ÄúBrand deprioritized üí§\n{ "weights": { "brand": 0.5 } }‚Äù

// üõ†Ô∏è FILTER SCHEMA:
// {
//   gender: "all",
//   season: "all",
//   occasion: "all",
//   temperature: 20,
//   price_range: 200,
//   brand: "any",
//   color: "any",
//   material: "any"
// }

// üßÆ WEIGHT SCHEMA:
// {
//   gender: 1,
//   season: 1.5,
//   occasion: 4,
//   temperature_range: 3,
//   price: 2,
//   brand: 3,
//   color: 6,
//   material: 4,
//   type: 4,
//   metadataBonus: 0.8,
//   harmonyBonus: 2.5,
//   vibeBonus: 4
// }
// üí£ STYLE EXPLOSION RULE (MANDATORY)

// ‚Ä¢ When user mentions a style (e.g. ‚Äúgothic‚Äù, ‚Äúy2k‚Äù, ‚Äúminimalist‚Äù, ‚Äústreetwear‚Äù):
//   YOU MUST:
//   ‚úÖ Overwrite AT LEAST 5 fields in ‚Äúfilters‚Äù
//   ‚úÖ Change at least 4 weights
//   ‚úÖ Never leave more than 2 filters untouched
//   ‚úÖ Use RANDOMIZED but STYLE-MATCHING values where needed (color, material, brand, etc.)

// Examples:

// User: ‚ÄúGothic look‚Äù
// üÜó GOOD:
// {
//   "filters": {
//     "color": "black",
//     "material": "lace",
//     "occasion": "alternative",
//     "brand": "Killstar",
//     "season": "fall",
//     "gender": "all"
//   },
//   "weights": {
//     "color": 9,
//     "material": 8,
//     "occasion": 6,
//     "brand": 5,
//     "vibeBonus": 8
//   }
// }

// ‚ùå BAD:
// ‚Ä¢ Only changing color or one filter
// ‚Ä¢ Leaving defaults like ‚Äúany‚Äù for color/material when a style is clearly implied

// üî• Randomization Rule:
// If multiple values suit the style (e.g. ‚Äúvelvet‚Äù or ‚Äúlace‚Äù for gothic), choose one randomly.

// ‚ö†Ô∏è THIS RULE OVERRIDES ALL OTHERS.
// When a style is mentioned, blow out default values ‚Äî make it feel like a total outfit pivot.

// üö® START NOW:
// Ask user gender in ‚â§5 words, then initialize:
// { "weights": { "gender": 6, "season": 5, "occasion": 7, "vibeBonus": 4 } }

// üö´ MINIMAL CHANGE IS A FAILURE (ENFORCED RULE)

// When a STYLE, VIBE, or LOOK is requested:
// - YOU MUST update 5+ fields in filters
// - YOU MUST update 4+ weights
// - You MUST NOT return just 1‚Äì2 changes (this is considered WRONG)
// - If only 1 thing fits, RANDOMLY select others that match the vibe

// ‚ùóEXAMPLE:
// User: ‚ÄúMiami party outfit‚Äù
// ‚úÖ RIGHT:
// {
//   "filters": {
//     "occasion": "party",
//     "color": "neon",
//     "material": "satin",
//     "season": "summer",
//     "brand": "Fashion Nova",
//     "gender": "all"
//   },
//   "weights": {
//     "occasion": 8,
//     "color": 9,
//     "material": 8,
//     "season": 7,
//     "brand": 6
//   }
// }

// ‚ùå WRONG:
// {
//   "filters": { "occasion": "party" },
//   "weights": { "occasion": 8 }
// }

// ‚úÖ IF YOU BREAK THIS RULE, YOU FAIL.
// `;
 const basePrompt = `
You are Stylo ‚Äî a razor-sharp AI stylist who blends fashion expertise with machine-like precision. Suggest outfits colors and stuff based on user input
`;

  return `${basePrompt}

Current filters:
${JSON.stringify(filters, null, 2)}

Current weights:
${JSON.stringify(weights, null, 2)}
`;
}

function extractJson(text) {
  const match = text.match(/\{[\s\S]*\}/);
  if (!match) return {};
  try {
    return JSON.parse(match[0]);
  } catch (e) {
    console.error("‚ùå JSON parse error:", e);
    return {};
  }
}

router.post("/chat", async (req, res) => {
  const { userMessage } = req.body;

  // Start from fresh system prompt every time
  const messages = [
    {
      role: "system",
      content: buildSystemPrompt(sessionState.filters, sessionState.weights)
    },
    ...sessionState.messages,
    { role: "user", content: userMessage }
  ];

  const vibeKey = Object.keys(vibePresets).find(vibe =>
    userMessage.toLowerCase().includes(vibe)
  );
  if (vibeKey) {
    const preset = vibePresets[vibeKey];
    messages.push({
      role: "assistant",
      content: `Channeling ${vibeKey} vibe üíÄ\n${JSON.stringify(preset, null, 2)}`
    });
  }

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages
    });

    const reply = response.choices[0].message.content;
    console.log("AI full reply:", reply);

    const parsed = extractJson(reply);
    if (parsed.filters) {
      Object.assign(sessionState.filters, parsed.filters);
    }
    if (parsed.weights) {
      Object.assign(sessionState.weights, parsed.weights);
    }

    sessionState.messages.push({ role: "user", content: userMessage });
    sessionState.messages.push({ role: "assistant", content: reply });

    res.json({ reply });
  } catch (err) {
    console.error("OpenAI error:", err);
    res.status(500).json({ error: "Stylo is offline for a quick beauty nap üíÖ" });
  }
});

module.exports = router;

